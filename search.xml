<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[方法论-元学习践行三部曲之编程-笔记]]></title>
      <url>%2F2020%2F09%2F05%2F%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%85%83%E5%AD%A6%E4%B9%A0%E8%B7%B5%E8%A1%8C%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E7%BC%96%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[给自己设计游戏规则和边界，不断地获得正反馈。 一、进入新手村STEP1:建立对学习内容的基本认知比如学习编程。 编程就是自动地解决问题： 观察一件事情输入了什么，导致输出了什么 思考事情可以重复被做的方法 不要期待错误的方法能够得到正确的结果 STEP2:拼出学习内容学习不是登山，而是拼图。因为对于一个全新的学习内容，人的大脑没有办法用未知解决未知。可以先不用左脑的逻辑分析模式，而是用右脑模式去感知所学内容，形成一个大致的外貌。抓全局，这样才不至于发生由入门到放弃的悲剧。心理学对拖延症的解释就是：害怕失败，追求完美。Xdite战胜拖延症的方法：骗骗自己，只是随便玩玩。 理论依据：认知心理学、“拼图理论” 学习要有成就感，要让自己停不下来。 比如学习编程，应该先快速把东西拼出来，拼一个大东西，然后公开给朋友，接受朋友的赞美，得到正向回馈。而不是苦逼的把一本书从头看到尾。 [练习与资源] 推荐书籍《创造力培训：像艺术家一样思考》 用右脑模式画画练习：拿出自己的照片，倒着画自画像 STEP3:抢在放弃之前建立正循环建立正循环： 模仿——小项目 –&gt; 大项目 –&gt; 发布 –&gt; 激励 “玩手游”三步：执行任务，获得新手技能——熟悉掌握——不断获得奖励，沉浸其中。 “学编程”三步：快速把东西拼出来 –&gt; 拼出更大的东西 –&gt; 公开并享受称赞。 理论依据：通过不断的正向反馈能过获得成就感 认知心理学理论：不断的重复训练可以形成肌肉记忆，把工作记忆存储到长期记忆中。 提出左右脑配合的肌肉快速入门法。通过先用右脑感知，模仿，熟悉基本框架，再放左脑出来理性分析。 批判了自学效率低的四个大坑： 必须有天赋 必须要看懂每一个步骤，才能往前进 学习必须要扎实，要从技术原理开始学起 学习当中禁止用一切捷径，比如说复制粘贴代码，模仿别人的程序。 初始加速度一定要大，不断地获得成就感；熟悉框架后需要复习时才适合用以上四个大坑。 [练习与资源] 用iPad 玩swift playground 儿童学习编程软件 scratch 二、晋级高级新手STEP1:获得高频小套路付费寻找要学习领域的专家级高手，获得一个“高频小套路”，即这个领域20个最常用的动作，或核心知识，形成对一个领域的框架 找出一本实做型的入门指南。最好三天内可以搞定，写完一个小项目。翻开书，直接跳到最后的项目，快速做3遍： 第一遍： 复制项目代码； 第二遍： 跟着打代码，熟悉基本工具，阅读错误信息，学会Debug； 第三遍， 分析打错的，为什么会错。体会输入什么，就会得到什么。把懂的，不懂的，都背下来。 还有独门秘籍：用markdown把自己特别傻逼犯错的地方记下来，把正确的解法也记下来，然后公开发表。同时，自己也背下来。 STEP2:加速全盘模仿学习新技能的时候初速度一定要快，最快的方法就是左右脑配合。“分散模式”和“专注模式”交替进行。不问理由的全盘模仿。 STEP3:大量重复练习大脑善于调出过去的记忆对事情进行判断，但大脑不能用未知理解未知，因为理解是记忆的相关连接。所以对于新知，大脑很难理解，因为大脑无法调出相关记忆。从这个角度来说，大脑对于新领域是不善于思考的。对策就是：利用高频小套路，全盘模仿，进行大量练习，形成肌肉（长期）记忆。 所以，人人可以通过高频小套路，快速成为高级新手或胜任者 XDite提到了德雷福斯模型，新手 –&gt; 高级新手 –&gt; 胜任者 –&gt; 精通者 –&gt; 专家。 其实市面上大于50%的都是高级新手。任何人只要有一份高频小套路的SOP，都快速成为高级新手甚至胜任者，可以入行得到一份职位。 专家都不是靠坚持得来的，而是上瘾和停不下来。要运用游戏化机制，行动 –&gt; 回馈 –&gt; 不确定的回馈，让自己上瘾。 这一点，我可以胜任，通宵打游戏，用虚拟人生复刻自己小时候的社区，连夜追韩剧，看小说，我，你都可以的。 什么是高频小套路？ 高频小套路，就是大牛抽取的最核心、最重要、最常出现那部分学习内容（按80/20法则，通常是20%）。 比如编程，就是最最常用的函数、模块，一个完整小项目的最核心最基础的部分。 比如跳舞，就是最常出现的舞步。 比如TOFEL词汇，就是核心词2140个。 关于英语的高频小套路，多读，多朗读，大声朗读，还有精度原版书和背诵金句。然而，有多少人严格要求自己天天朗读？有多少人坚持每天阅读一小时原版书？坚持每天背诵金句？ 关于写作的高频小套路，多读多读多读，增加输入质量；多写多写多写，高频率练习，磨炼输出技能。又多少人真的做到？ 反复练习要反复几次？ 起码三次：全栈营代码练习，官方答复是起码3次。注意起码。随着练习的次数增多，一次比一次熟练，一次比一次体会深。 每天练习： 写作练习，李笑来老师当年是每天写3000字，雷打不动。哪怕别的事耽搁了，很晚了，夜深了，没写也得写，必须写。既然决定了，就绝对不能妥协。 反复练习的总量，起码要多少？ 400小时。一般从新手到高级新手的程度，使用高频小套路练习，需要400小时。虽然相比吓人的10000小时，400小时不过1/25。但是，你只练3次，一次10小时，还差得远。 高频小套路是1，你的高频练习是后面的零。如过练习一次，1就是1，数量级太小，根本没用！练1次后面加一个0，越到后面，你的能力提升的越快。（当然，练到一定程度，会出现边际效应，你该练下一个高频小套路啦） 高频小套路不是内功，大牛无法直接转输给你。高频小套路是大牛写的武功秘籍，需要你反复的练习，不断的练习，刻意的练习，才能为你所用，才能让你的能力迅速增长，才能见自己、见天地、见众生（有幸的话） [练习与资源] （修改为自己设计的资源） 编程入门方法:选一本实做型教材，做三遍； Xdite 推荐:《Rails bridge :intro to rails》 如何有效的提取练习？ xdite 老师说：大多数人读书学习是：打开课本，画重点、抄笔记。然后复习时，重读这些重点以及笔记。(有没有中枪？)而真正有效的提取练习应该是：禁止打开课本重点与笔记, 拿一张全新的白纸, 默写: 回想之前划了哪些重点为什么要划这些重点然后，打开当初的课本重点，与【回想笔记】对照。【我的体验】一开始提取练习时，感觉非常不舒服，很想逃避。很想打开书偷看, 不愿默写。但当我硬着头皮，强行提取，发现：咦！以前记不住的，提取之后，都记住了，而且不易忘。 三、跨越到专家德雷福斯模型表达了专业技能的五个层级。 从低级到高级是：新手——高级新手——胜任者——精通者——专家 （在《程序员思维修炼》中有具体阐述）75%以上的从业者都处于新手和高级新手的层次。“一万小时理论”只适用于不断精进自己能力的练习，一年的经验重复十年是没有用的。那么如何从新手和高级新手跨越到人数稀少的专家行列呢？ A way:成瘾 高级新手以上的大牛的字典里是没有“坚持”二字的，他们只是上瘾了。成瘾的方法是：有明确的目标，时时得到正反馈，形成正循环。 将学习游戏化 将机械式行为游戏化，这样可以避免常规学习方式的无刺激感 游戏比日常习惯有更强力的刺激 游戏历程： 发现一个新游戏——用户开始玩——用户知道规则后，达成多个胜利状态——弃玩 模仿游戏的设计方法设计自己的学习模式 游戏是建立习惯的系统性公式：形成习惯回路——形成惯性行为——得到回报——直接相关人得到奖励 Behavior= Motive+Ability+Trigger 游戏让用户上瘾的方法是：奖励的大小、奖励出现的时间、奖励的内容是随机的 不要害怕上瘾 很多杰出的专家，身上都有的模式：各个都是瘾君子，很容易上瘾。大师是成瘾到停不下来的人。上瘾是高生产力、大进步的方式，保持容易成瘾的状态、迅速闯过高级新手这一关。 奖励自己 设计奖励 所谓兴趣，是行为得到奖励后的产物。帮助自己来实现自我。让学到的内容得到奖励的方法：讲给别人、教会别人、得到一个演出的机会，获得商业价值等。也就是实现自我价值。 降低行动门槛，不断自我实现。 人的行为可以被设计：Behavior= Motive+Ability+Trigger 不止游戏，类比好多商家营销、公司奖金、工资设计，创造上瘾的学习方式 参考资料: XDite 演讲 元学习实践（五）高频小套路是武功秘籍，反复练习才能为我所用——爱莉莎]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java-Web-JSP-taglib指令]]></title>
      <url>%2F2017%2F05%2F29%2FJavaWeb%2FJava-Web-JSP-taglib%E6%8C%87%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[需求效果图 需求: 分析: 代码结构解释: 完整代码]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java-Web-JSP-脚本元素]]></title>
      <url>%2F2017%2F05%2F29%2FJavaWeb%2FJava-Web-JSP-%E8%84%9A%E6%9C%AC%E5%85%83%E7%B4%A0%2F</url>
      <content type="text"><![CDATA[Demo图示 需求 输出数字1~10, 奇数为颜色为darkcyan, 偶数颜色为aquamarine 分析 方式一: 脚本片段和脚本表达式结合使用; 方式二: 脚本片段和脚本表达式结合使用; 方式三: 脚本片段, 脚本表达式和脚本声明结合使用; 相关语法 脚本声明格式 123&lt;%! 书写对应的Java代码%&gt; 脚本声明: 成员变量, 成员方法, 内部类 脚本表达式格式 12&lt;%=表达式 %&gt;表达式内容: 常量 or 变量 or 结果的输出 注意：脚本表达式不能书写java代码的结束标记分号。 脚本片段 脚本片段格式：首先说明，这种格式使用的非常少，而且书写的时候，一定要留心！ 1234&lt;% Java代码 %&gt;html代码&lt;% Java代码%&gt;... 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;脚本元素&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;需求: 输出数字1~10,奇数为颜色为darkcyan,偶数颜色为aquamarine&lt;/p&gt; &lt;p&gt;实现: 方式一&lt;/p&gt; &lt;% for (int i = 1; i &lt;= 10; i++) &#123; if (i % 2 == 0) &#123; %&gt; &lt;div style=&quot;background-color: aquamarine&quot;&gt;&lt;%=i%&gt;&lt;/div&gt; &lt;% &#125; else &#123; %&gt; &lt;div style=&quot;background-color: darkcyan&quot;&gt;&lt;%=i%&gt;&lt;/div&gt; &lt;% &#125; &#125; %&gt; &lt;p&gt;实现: 方式二&lt;/p&gt; &lt;% for (int i = 1; i &lt;= 10; i++) &#123; %&gt; &lt;div style=&quot;background-color: &lt;%=i % 2 == 0 ? &quot;aquamarine&quot; : &quot;darkcyan&quot;%&gt;&quot;&gt;&lt;%=i%&gt;&lt;/div&gt; &lt;% &#125; %&gt; &lt;p&gt;实现: 方式三&lt;/p&gt; &lt;%! public String getColor(int i) &#123; return i % 2 == 0 ? &quot;aquamarine&quot; : &quot;darkcyan&quot;; &#125; %&gt; &lt;% for (int i = 1; i &lt;= 10; i++) &#123; %&gt; &lt;div style=&quot;background-color:&lt;%=getColor(i)%&gt;&quot;&gt;&lt;%=i%&gt;&lt;/div&gt; &lt;% &#125; %&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTML-发现一个逆天的问题(文档中没有说明的问题)]]></title>
      <url>%2F2016%2F09%2F05%2FHTML%2FHTML-%E5%8F%91%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%80%86%E5%A4%A9%E7%9A%84%E9%97%AE%E9%A2%98(%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B2%A1%E6%9C%89%E8%AF%B4%E6%98%8E%E7%9A%84%E9%97%AE%E9%A2%98)%2F</url>
      <content type="text"><![CDATA[Demo图示 代码Github上有完整代码 12&lt;option selected=false&gt;大连市&lt;/option&gt; &lt;!-- 这样也可以 --&gt;&lt;!--&lt;option selected=null&gt;大连市&lt;/option&gt;--&gt; &lt;!-- 这样也可以 --&gt; 12&lt;!--篮球：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;basketball&quot; checked=false&gt;--&gt; &lt;!-- 这样也可以 --&gt;篮球&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;basketball&quot; checked=null&gt; &lt;!-- 这样也可以 --&gt; 一个哥们儿无意间发现的，是不是要说些什么！]]></content>
    </entry>

    
  
  
</search>
